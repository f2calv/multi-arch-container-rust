FROM --platform=$BUILDPLATFORM rust AS base
ARG TARGET
RUN apt-get update && apt-get upgrade -y
RUN apt-get install -y g++-aarch64-linux-gnu libc6-dev-arm64-cross
RUN rustup component add clippy
RUN rustup component add rustfmt
RUN rustup target add $TARGET
RUN rustup toolchain install stable-$TARGET



FROM base AS dependencies
ARG TARGET
WORKDIR /app
#initialize an empty application
RUN cargo init
#replace the dependencies file with our own
COPY Cargo.toml Cargo.lock /app
#run a fetch to download the dependencies
ENV CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
RUN cargo build --release --target $TARGET



FROM dependencies AS source
COPY src src



FROM source AS build
ARG TARGET
ENV CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
RUN cargo build --release --target $TARGET



FROM gcr.io/distroless/cc AS final
ARG TARGET
COPY --from=build /app/target/$TARGET/release/multi-arch-container-rust .

ARG GIT_REPO
ENV APP_GIT_REPO=$GIT_REPO
ARG GIT_TAG
ENV APP_GIT_TAG=$GIT_TAG
ARG GIT_BRANCH
ENV APP_GIT_BRANCH=$GIT_BRANCH
ARG GIT_COMMIT
ENV APP_GIT_COMMIT=$GIT_COMMIT

ARG GITHUB_WORKFLOW
ENV APP_GITHUB_WORKFLOW=$GITHUB_WORKFLOW
ARG GITHUB_RUN_ID=0
ENV APP_GITHUB_RUN_ID=$GITHUB_RUN_ID
ARG GITHUB_RUN_NUMBER=0
ENV APP_GITHUB_RUN_NUMBER=$GITHUB_RUN_NUMBER

ENTRYPOINT ["./multi-arch-container-rust"]
